{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Product Service","text":"<p>O <code>product-service</code> \u00e9 respons\u00e1vel por cadastrar, listar, buscar e remover produtos do sistema. Ele implementa a interface <code>ProductController</code> e utiliza JPA para persist\u00eancia em banco de dados relacional.</p>"},{"location":"#funcionalidades","title":"Funcionalidades","text":"<ul> <li>Criar novos produtos com valida\u00e7\u00e3o: Permite o cadastro de produtos com valida\u00e7\u00f5es de campos obrigat\u00f3rios e formatos.</li> <li>Listar todos os produtos: Exibe uma lista paginada de todos os produtos cadastrados.</li> <li>Buscar produto por ID: Permite consultar detalhes de um produto espec\u00edfico pelo seu ID.</li> <li>Remover produto por ID: Permite a exclus\u00e3o de um produto espec\u00edfico pelo seu ID, com valida\u00e7\u00e3o para evitar remo\u00e7\u00e3o de produtos inexistentes.</li> </ul>"},{"location":"#cache-com-redis","title":"Cache com Redis","text":"<p>Para otimizar a performance de leitura, o <code>product-service</code> utiliza Redis como sistema de cache:</p> <ul> <li>Dados de produtos frequentemente consultados s\u00e3o armazenados em Redis.</li> <li>Isso reduz a carga no banco de dados relacional e diminui o tempo de resposta.</li> <li>As entradas em cache possuem tempo de expira\u00e7\u00e3o configur\u00e1vel (TTL) para garantir a atualiza\u00e7\u00e3o peri\u00f3dica das informa\u00e7\u00f5es.</li> </ul>"},{"location":"#observabilidade-prometheus-grafana","title":"Observabilidade (Prometheus + Grafana)","text":"<p>O servi\u00e7o integra m\u00e9tricas e logs ao Prometheus e ao Grafana para monitoramento e visualiza\u00e7\u00e3o em tempo real:</p> <ul> <li>Prometheus</li> <li>Coleta m\u00e9tricas HTTP (lat\u00eancia, n\u00famero de requisi\u00e7\u00f5es, c\u00f3digos de resposta) e m\u00e9tricas internas do JVM.</li> <li>Configurado para raspar (<code>scrape</code>) o endpoint <code>/actuator/prometheus</code> exposto pelo Spring Boot.</li> <li>Grafana</li> <li>Consome os dados do Prometheus e gera dashboards customizados.</li> <li>Permite acompanhar trends de uso, identificar gargalos e disparar alertas quando thresholds s\u00e3o ultrapassados.</li> </ul> <p>Essa camada de observabilidade facilita a detec\u00e7\u00e3o de anomalias, otimiza\u00e7\u00e3o de performance e tomada de decis\u00f5es operacionais.</p>"},{"location":"#integracao-com-jenkins","title":"Integra\u00e7\u00e3o com Jenkins","text":"<p>Este projeto conta com um arquivo Jenkinsfile (na raiz do reposit\u00f3rio) que define uma pipeline de integra\u00e7\u00e3o cont\u00ednua para compilar automaticamente o m\u00f3dulo sempre que houver altera\u00e7\u00f5es no reposit\u00f3rio.</p>"},{"location":"#para-que-serve","title":"Para que serve?","text":"<ul> <li> <p>Compila\u00e7\u00e3o automatizada: toda altera\u00e7\u00e3o no reposit\u00f3rio dispara o build do Maven, detectando problemas de compila\u00e7\u00e3o antes do merge.</p> </li> <li> <p>Imagens Docker consistentes: gera e publica automaticamente imagens multiplataforma, facilitando o deploy em diferentes ambientes (x86_64 e ARM).</p> </li> <li> <p>Seguran\u00e7a das credenciais: utiliza credenciais armazenadas no Jenkins (identificador dockerhub-credential), evitando exposi\u00e7\u00e3o de senhas no c\u00f3digo.</p> </li> </ul> <p>Dessa forma, a integra\u00e7\u00e3o com Jenkins garante que o product-service esteja sempre compilando e empacotado corretamente, com uma imagem Docker pronta para ser implantada nos clusters de produ\u00e7\u00e3o ou QA.</p>"},{"location":"arquitetura/","title":"Arquitetura","text":""},{"location":"arquitetura/#estrutura-de-pastas","title":"Estrutura de Pastas","text":"<pre><code>src/main/java/store/product/\n\u251c\u2500\u2500 Product.java # Entidade de dom\u00ednio\n\u251c\u2500\u2500 ProductModel.java # Entidade JPA\n\u251c\u2500\u2500 ProductRepository.java # Reposit\u00f3rio JPA\n\u251c\u2500\u2500 ProductService.java # L\u00f3gica de neg\u00f3cio\n\u251c\u2500\u2500 ProductParser.java # Convers\u00f5es entre DTOs e entidade\n\u251c\u2500\u2500 ProductResource.java # Implementa\u00e7\u00e3o REST (controller)\n\u2514\u2500\u2500 ProductApplication.java # Classe principal\n\u2514\u2500\u2500 resources/\n\u2502 \u251c\u2500\u2500 application.yaml # Configura\u00e7\u00f5es de ambiente\n\u2502 \u2514\u2500\u2500 db/migration/ # Scripts Flyway\n</code></pre>"},{"location":"entidades/","title":"Entidades","text":""},{"location":"entidades/#product","title":"Product","text":"<p>Entidade de dom\u00ednio usada internamente no servi\u00e7o.</p> <pre><code>Product {\n  String id;\n  String name;\n  String unit;\n  Double price;\n}\n</code></pre>"},{"location":"entidades/#productmodel","title":"ProductModel","text":"<p>Entidade JPA que representa a tabela <code>product</code> no banco de dados.</p> <p>Campos mapeados com:</p> <ul> <li><code>id_product</code>: Identificador \u00fanico do produto.</li> <li><code>tx_name</code></li> <li><code>tx_unit</code></li> <li><code>double_price</code></li> </ul>"},{"location":"entidades/#productin-entrada-via-api","title":"ProductIn (entrada via API)","text":"<pre><code>ProductIn {\n  String name;\n  Double price;\n  String unit;\n}\n</code></pre>"},{"location":"entidades/#productout-resposta-da-api","title":"ProductOut (resposta da API)","text":"<pre><code>ProductOut {\n  String id;\n  String name;\n  Double price;\n  String unit;\n}\n</code></pre>"},{"location":"entidades/#productparser-conversoes-entre-dtos-e-entidade","title":"ProductParser (convers\u00f5es entre DTOs e entidade)","text":"<ul> <li><code>ProductIn</code> \u2192 <code>Product</code>.</li> <li><code>Product</code> \u2192 <code>ProductOut</code>.</li> </ul>"},{"location":"setup/","title":"Setup e Execu\u00e7\u00e3o - Product Service","text":""},{"location":"setup/#requisitos","title":"Requisitos","text":"<ul> <li>Java 17+</li> <li>Spring Boot</li> <li>JPA (Hibernate)</li> <li>Flyway</li> <li>Lombok</li> </ul>"},{"location":"setup/#dependencias-principais","title":"Depend\u00eancias principais","text":"<ul> <li><code>spring-boot-starter-data-jpa</code></li> <li><code>spring-boot-starter-web</code></li> <li><code>flyway-core</code></li> <li><code>lombok</code></li> </ul>"},{"location":"setup/#como-compilar","title":"Como compilar","text":"<pre><code>mvn clean package\n</code></pre>"},{"location":"setup/#validacoes","title":"Valida\u00e7\u00f5es","text":"<ul> <li> <p>Nome do produto \u00e9 obrigat\u00f3rio</p> </li> <li> <p>Pre\u00e7o deve ser positivo</p> </li> </ul>"}]}